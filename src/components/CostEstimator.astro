---
import creditsData from "../data/credits.json";
---

<>
  <h2 class="margin-top-0">Cloud.gov Credit Estimator</h2>

  <div id="estimator-rows" class="bg-primary-lightest border-primary-light border"></div>

  <button type="button" class="usa-button usa-button--outline margin-right-0" id="add-row">+ Add service</button>

  <p class="total">
    Estimated credits: <span id="credit-total"></span>
  </p>

  <template id="row-template">
    <div class="estimator-row border-primary-light border-top-1px">
      <div class="service-container">
        <label class="usa-label text-bold" for="service-select">Service type</label>
        <select class="usa-select service-select" id="service-select">
          <option disabled selected>— Choose a service —</option>
        </select>
      </div>

      <div class="plan-container" hidden>
        <label class="usa-label text-bold" for="plan-select">Plan size</label>
        <select class="usa-select plan-select" id="plan-select">
          <option disabled selected>— Choose a plan size —</option>
        </select>
      </div>

      <div class="metered-container" hidden>
        <label class="usa-label text-bold" for="metered-input"
          ><span class="metered-unit">unit</span>s <span class="metered-type"></span> per month</label
        >
        <input type="number" placeholder="units per month" class="usa-input metered-input" id="metered-input" min="1" />
      </div>

      <div class="multiplier-container" hidden>
        <label class="usa-label text-bold" for="multiplier-input"># of Instances</label>
        <input
          type="number"
          placeholder="# of Instances"
          class="usa-input multiplier-input"
          id="multiplier-input"
          min="1"
        />
      </div>

      <div class="free-container" hidden>
        <span>This service is complementary — use at no charge.</span>
      </div>

      <div class="subtotal-container text-right">
        <label class="usa-label text-bold">Credits/mo</label>
        <span class="credit-output font-sans-md">0</span>
      </div>
      <div class="remove-container">
        <button type="button" title="Remove" class="usa-button--unstyled remove-btn" aria-label="Remove row">
          <svg class="usa-icon usa-icon--size-4" role="img" aria-hidden="true">
            <use href={`${Astro.site}/assets/uswds/img/sprite.svg#delete`}></use>
          </svg>
        </button>
      </div>
    </div>
  </template>
</>
<script type="module">
  const data = await fetch("./data/credits.json").then((r) => r.json());
  const estimatorRows = document.getElementById("estimator-rows");
  const addRowBtn = document.getElementById("add-row");
  const creditTotal = document.getElementById("credit-total");
  const rowTemplate = document.getElementById("row-template");

  function formatNum(num = 0) {
    return new Intl.NumberFormat().format(num);
  }

  function yearlyFromMonthly(num = 0) {
    return formatNum(num * 12);
  }

  function createRow() {
    const node = rowTemplate.content.cloneNode(true);
    const row = node.querySelector(".estimator-row");
    const serviceSelect = node.querySelector(".service-select");
    const planContainer = node.querySelector(".plan-container");
    const planSelect = node.querySelector(".plan-select");
    const meteredContainer = node.querySelector(".metered-container");
    const meteredInput = node.querySelector(".metered-input");
    const meteredUnit = node.querySelector(".metered-unit");
    const meteredType = node.querySelector(".metered-type");
    const multiplierContainer = node.querySelector(".multiplier-container");
    const multiplierInput = node.querySelector(".multiplier-input");
    const freeContainer = node.querySelector(".free-container");
    const creditOutput = node.querySelector(".credit-output");
    const removeBtn = node.querySelector(".remove-btn");

    data.services.forEach((s, i) => {
      const opt = document.createElement("option");
      opt.value = i;
      opt.textContent = s.name;
      serviceSelect.appendChild(opt);
    });

    function updateRow() {
      const selected = data.services[serviceSelect.value];
      let credits = 0;

      planContainer.hidden = true;
      meteredContainer.hidden = true;
      multiplierContainer.hidden = true;
      freeContainer.hidden = true;
      planSelect.innerHTML = "";

      if (selected?.free) {
        credits = 0;
        freeContainer.hidden = false;
      } else if (selected?.plans) {
        planContainer.hidden = false;
        selected.plans.forEach((p, i) => {
          const opt = document.createElement("option");
          opt.value = i;
          const creditLabel = `${p.credits} credit${p.credits === 1 ? "" : "s"}`;
          let optContent = p.plan;
          if (p.instanceClass !== undefined) {
            optContent += ` (${p.instanceClass})`;
          }
          opt.textContent = optContent;
          planSelect.appendChild(opt);
        });

        const updateCredits = () => {
          credits = selected.plans[planSelect.value]?.credits || 0;
          creditOutput.textContent = credits;
          row.dataset.credits = credits;
          updateTotal();
        };

        planSelect.addEventListener("change", updateCredits);

        updateCredits();
      } else if (selected?.metered) {
        meteredContainer.hidden = false;
        meteredUnit.innerText = selected.metered.unit;
        meteredType.innerText = selected.metered.type;
        meteredInput.placeholder = `${selected.metered.unit}s ${selected.metered.type} per month`;

        if (selected?.multiplier) {
          multiplierContainer.hidden = false;
        }

        const updateCredits = () => {
          const metered = Math.abs(parseFloat(meteredInput.value)) || 0;
          const multiplier = Math.abs(parseFloat(multiplierInput.value)) || 1;
          credits = Math.ceil(metered / selected.metered.unitsPerCredit) * multiplier * selected.metered.credits;
          creditOutput.textContent = credits;
          row.dataset.credits = credits;
          updateTotal();
        };

        meteredInput.addEventListener("input", updateCredits);
        multiplierInput.addEventListener("input", updateCredits);
        updateCredits(); // Initial update
      }

      creditOutput.textContent = credits;
      row.dataset.credits = credits;
      updateTotal();
    }

    serviceSelect.addEventListener("change", updateRow);
    removeBtn.addEventListener("click", () => {
      row.remove();
      updateTotal();
    });

    updateRow();
    estimatorRows.appendChild(row);
  }

  function updateTotal() {
    const rows = [...estimatorRows.querySelectorAll(".estimator-row")];
    const total = rows.reduce((sum, row) => sum + (parseInt(row.dataset.credits) || 0), 0);
    creditTotal.textContent = `${formatNum(total)}/month or ${yearlyFromMonthly(total)}/year`;
  }

  addRowBtn.addEventListener("click", createRow);

  createRow();
</script>

<style>
  .total {
    margin-top: 1rem;
    font-weight: bold;
    font-size: 1.8rem;
  }

  #estimator-rows {
    display: flex;
    flex-flow: column;
    width: 100%;
    max-width: calc(100ch - 4rem);
    padding: 0.5rem 1rem 0;
    margin-bottom: 1rem;
  }

  .estimator-row {
    display: flex;
    flex-flow: row;
    justify-content: space-between;
    padding-bottom: 0.5rem;
    align-items: end;
    gap: 1rem;
  }
  .estimator-row label.usa-label {
    margin-top: 0;
  }

  .estimator-row:first-of-type {
    border-width: 0;
  }
  .estimator-row:not(:first-of-type) label.usa-label {
    display: none;
  }
  .plan-container,
  .metered-container,
  .multiplier-container,
  .free-container {
    flex: 1;
    min-height: 2.5em;
    align-content: center;
  }

  .subtotal-container {
    width: 5rem;
    margin-left: auto;
  }
  .credit-output {
    display: block;
    line-height: 3rem;
  }
  .remove-container {
    width: 4.5rem;
    height: 2.5rem;
    text-align: right;
    align-content: center;
  }
  .remove-btn {
    cursor: pointer;
  }

  @media (max-width: 799px) {
    .estimator-row {
      flex-direction: row;
      align-items: stretch;
      gap: 1rem;
      padding: 1rem 0;
      flex-wrap: wrap;
    }

    .service-container,
    .plan-container,
    .metered-container,
    .multiplier-container,
    .free-container {
      padding: 0;
      margin: 0;
      width: 100%;
      flex: none;
    }

    .credit-output {
      line-height: inherit;
    }

    .remove-container {
      justify-content: flex-end;
    }

    .remove-btn svg {
      height: 2rem;
      width: 2rem;
    }

    .subtotal-container,
    .remove-container {
      margin-left: 0;
    }

    .subtotal-container {
      order: 1;
      text-align: left;
    }

    .remove-container {
      order: 2;
      text-align: right;
    }
  }
</style>
